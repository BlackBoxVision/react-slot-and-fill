{"version":3,"file":"main.62b7d6ceffb6293bd39d.bundle.js","sources":["webpack:///./src/context/index.tsx"],"sourcesContent":["import React from 'react';\n\nconst noopRenderCallback = () => {\n  console.warn(`SlotAndFillManager: NoopRenderCallback has nothing to render`);\n  return false;\n};\n\nexport interface SlotFillManager {}\n\nexport class SlotFillManager {\n  slotsAndFills = new Map();\n  subscribers: Array<{ slotId: string; callback: any }> = [];\n\n  setFillForSlot = (slotId: string, renderCallback = noopRenderCallback) => {\n    const fillForSlot = this.slotsAndFills.get(slotId);\n\n    if (fillForSlot) {\n      console.warn(\n        `SlotAndFillManager: You've already registered a Fill for the following slotId: ${slotId}`\n      );\n      return;\n    }\n\n    this.slotsAndFills.set(slotId, renderCallback);\n    this.notify(slotId);\n  };\n\n  getFillForSlot = (slotId: string) => {\n    const fillById = this.slotsAndFills.get(slotId);\n\n    if (!fillById) {\n      console.warn(\n        `SlotAndFillManager: There's no Fill registered for the following slotId: ${slotId}`\n      );\n      return noopRenderCallback;\n    }\n\n    return fillById;\n  };\n\n  subscribe = (slotId: string, callback: any) => {\n    console.warn(`SlotAndFillManager: Subscribe callback for slotId ${slotId}`);\n    this.subscribers.push({ slotId, callback });\n  };\n\n  unsubscribe = (slotId: string, slotIndex: number) => {\n    console.warn(\n      `SlotAndFillManager: Unsubscribe callback for slotId ${slotId} and slotIndex ${slotIndex}`\n    );\n\n    this.subscribers = this.subscribers.filter(\n      (subscriber: any, index: number) =>\n        subscriber.slotId === slotId && index === slotIndex\n    );\n  };\n\n  notify = (slotId: string) => {\n    console.warn(`SlotAndFillManager: Notify subscribers for slotId ${slotId}`);\n    console.warn(\n      `SlotAndFillManager: Current amount of subscribers is ${\n        this.subscribers.length\n      }`\n    );\n\n    this.subscribers.forEach((subscriber: any, index: number) => {\n      if (subscriber.slotId !== slotId) {\n        console.warn(\n          `SlotAndFillManager: Subscriber isn't matching slotId value`\n        );\n        return;\n      }\n\n      subscriber.callback(index);\n    });\n  };\n}\n\nexport const SlotFillContext = React.createContext({});\n\nexport const withContext = (Component: any) => {\n  const WrappedComponent = (props: any) => (\n    <SlotFillContext.Consumer>\n      {ctx => <Component {...props} ctx={ctx} />}\n    </SlotFillContext.Consumer>\n  );\n\n  WrappedComponent.displayName = Component.displayName || Component.name;\n\n  return WrappedComponent;\n};\n\nexport interface SlotFillContextProps {\n  suscribers: Array<{ slotId: string; callback: any }>;\n  slotsAndFills: Map<any, any>;\n  setFillForSlot: Function;\n  getFillForSlot: Function;\n  unsubscribe: Function;\n  subscribe: Function;\n  notify: Function;\n}\ntry {\n    // @ts-ignore\n    withContext.displayName = \"withContext\";\n    // @ts-ignore\n    withContext.__docgenInfo = { \"description\": \"\", \"displayName\": \"withContext\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/context/index.tsx#withContext\"] = { docgenInfo: withContext.__docgenInfo, name: \"withContext\", path: \"src/context/index.tsx#withContext\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAAA","sourceRoot":""}